# ==============================================================================
# COMMAND HUB
# A tool to automatically create a selection interface from a list of commands.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# ==============================================================================

function show_help () {
cat << EOF
Create a selection interface from a list of commands.

Usage: $( basename $0) [-i <CMD_FILE>] [-c <CMD_LIST>] [-t <HEADER_FILE>] [-s]

    -i <CMD_FILE>     Input file holding bash commands.
    -c <CMD_LIST>     Input command generating list entries.
    -t <HEADER_FILE>  An optional file holding a header to be printed.
    -p <PREFIX>       Optional command prefix (eg. 'java -jar')
    -s                Don't clear screen

Note that either -i or -c must be set.

EOF
exit 1
}

# setup temp files and ensure deletion on exit
tmplist=$( mktemp )
strippedlist=$( mktemp )
function cleanup () {
    rm -f $tmplist $strippedlist
}
trap cleanup EXIT SIGTERM

# setup coloring if tput available
hl=
rs=
if [ ! -z $( command -v tput ) ]; then
    hl=$( tput setaf 7; tput setab 4; )
    rs=$( tput sgr0 )
fi

# parse cmd line
while getopts "hi:t:c:p:s" opt; do
    case "$opt" in
    i) INFILE="$OPTARG";;
    t) HFILE="$OPTARG";;
    c) CMDLIST="$OPTARG";;
    p) PREFIX="$OPTARG";;
    s) DONTCLEAR=1 ;;
    h) show_help;;
    *) echo "Illegal argument."; show_help;;
	esac
done

# check if there is a remaining argument
shift $(expr $OPTIND - 1 )
# if it's a number use it as preselection
[ $# -gt 0 ] && [[ "$1" =~ ^[0-9]+$ ]] && PRESELECTION="$1"

# check settings
[ -z "$INFILE" ] && [ -z "$CMDLIST" ] && { echo "No input."; show_help; }
[ ! -z "$INFILE" ] && [ ! -e "$INFILE" ] && {
echo "Input file does not exist."; show_help; }

# ==============================================================================
# MAIN PROCESSING
# ==============================================================================

[ ! -z "$INFILE" ] && cat "$INFILE" | grep -v -e "^[[:space:]]$" \
>> $tmplist # add cmds from file
[ ! -z "$CMDLIST" ] && eval "$CMDLIST" | grep -v -e "^[[:space:]]$" \
>> $tmplist # add cmds from command

# strip away leading characters that are equal to all commands
awk 'NR==1{
       pos=split($0,a,"")
 }
 NR==FNR{
      split($0,b,"")
      for(i=1;i<=pos;i++)
         if(b[i]!=a[i]){
            pos=i
            break
       }
       next
    }
NR!=FNR{
   print substr($0,pos)
}' $tmplist $tmplist > $strippedlist

[ ! $DONTCLEAR ] && printf "\033c"
[ ! -z "$HFILE" ] && { cat $HFILE; echo ""; } # header if available

i=1
mapfile -t ARRAY < $tmplist
while read line
do
    printf "$hl[%03s%s]$rs\t${line}\n" $i
    i=$(($i + 1))
done < "$strippedlist"

# if there is a preselection, just run it ..
if [ ! -z $PRESELECTION ]
then
    selection=$PRESELECTION
else
    # .. otherwise let user select
    echo
    echo -n "Enter selection: "
    read -r -e -n 2 selection
    echo

fi
sel_line=${ARRAY[$(( $selection - 1 ))]}

#echo "$selection = $sel_line"; sleep 3; # debug

if [ -z "$sel_line" ]
then
    echo "Invalid selection"
    exit 1
fi
jump="$PREFIX $( echo "$sel_line" | sed -e "s/&/\\\\&/g" )" # escape &

[ ! $DONTCLEAR ] && printf "\033c"

echo "Calling command: $jump"
eval "$jump"
