#!/bin/bash
# ==============================================================================
# TSHARK (BASTI's BASH COMMONS)
# A small frontend for more convenience when using tshark/wireshark
#
# Licensed under the Apache License, Version 2.0 (the "License");
# ==============================================================================

FILTER=""
GRAPHICAL=0
IPADDR=$( ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' |\
 cut -f1  -d'/' ) # guess ip address
TMPFILE_STAMP="_bbc-tshark_"

[ -z $( command -v tshark ) ] && { echo "tshark not installed.\n"; exit 1; }
[ -z $( command -v wireshark ) ] && { echo "wireshark not present.\n"; exit 1; }

help () {
[ ! -z "$1" ] && echo -e "\n$1\n"
cat << EOF
Usage:
    $( basename $0 ) -g -Y <DF>

Help Options:
    -h            Show help options
    -g            Use graphical wireshark instead of tshark
    -y <DF>       Apply manual display filter
    -m            Append local IP address to display filters
    -n            Append network protocol filters to display filters

    -c            Cleanup capture files in /temp and exit
    -s            Stop all tshark processes started by this script
    -l            List all pid- and capture-files known to this script

EOF
exit 1
}

list_temp_and_pid_files() {
    find /tmp -type f -iname "*$TMPFILE_STAMP*" 2> /dev/null
}

sigkill_all_pids() {
    #echo "-- stopping all running captures..."
    find /tmp -type f -iname "*$TMPFILE_STAMP*pid" 2> /dev/null |\
    while read f; do
        pid=$( head -n1 $f )
        echo "   + $f (PID=$pid)"
        [ ! -z $pid ] && kill -9 $pid 2> /dev/null
        rm "$f"
    done
}

delete_temp_files() {
    sigkill_all_pids
    #echo "-- removing all capture files..."
    find /tmp -type f -iname "*$TMPFILE_STAMP*pcapng" 2> /dev/null |\
    while read f; do
        echo "   + $f"
        rm -f "$f"
    done
}


cleanup () {
	sigkill_all_pids
}

trap cleanup EXIT SIGTERM

while getopts "hgy:mncsl" opt; do
    case "$opt" in
    g)  GRAPHICAL=1 ;;
	y)  FILTER=$OPTARG ;;
    m)  DF_IP="ip.src == $IPADDR" ;;
    n)  DF_NOISE="not (icmp||icmpv6||arp||dns||stp||llmnr||igmp||nbns||mdns||lldp||udp.dstport==1900||udp.port==67||udp.port==68)" ;;
    c)  delete_temp_files; exit 0 ;;
    s)  sigkill_all_pids; exit 0 ;;
    l)  list_temp_and_pid_files; exit 0 ;;
    h)  help ;;
    *)  help ;;
	esac
done

# setup display filters
FILTER="$psgFILTER§$DF_IP§$DF_NOISE"
FILTER=$( sed -r -e "s/^[ ]+//" -e "s/[ ]+$//" -e "s/§+/§/" \
-e "s/^§//" -e "s/§$//" -e "s/§/ and /g" <<< "$FILTER" )
[ ! -z "$FILTER" ] && FILTEROPT="-Y"

echo -e "-- options:     $FILTEROPT \"$FILTER\"" | grep -v " \"\""
[ $GRAPHICAL == 1 ] && {
    # open program and let user decide what to do with output
    wireshark -k $FILTEROPT "$FILTER" 2> /dev/null &
} || {
    # setup a process that runs the capturing to file
    TMPFILE=$( mktemp --suffix=$TMPFILE_STAMP$( date "+%Y%m%d-%H%M%S" ).pcapng )
    echo "-- capturefile: $TMPFILE"
    tshark -w $TMPFILE > /dev/null 2> /dev/null &
    procpid=$!
    PIDFILE=$( mktemp --suffix=$TMPFILE_STAMP$procpid.pid )
    echo $procpid > $PIDFILE
    echo "-- capture-pid: $procpid @ $PIDFILE"
    # setup a monitor to watch the capture with the given display filters
    [ -z "$FILTER" ] && {
        tail -c +0 -f $TMPFILE | tshark -r -
    } || {
        tail -c +0 -f $TMPFILE | tshark $FILTEROPT "$FILTER" -r -
    }


}
