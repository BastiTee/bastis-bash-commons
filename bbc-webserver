#!/bin/bash
# ==============================================================================
# WEBSERVER (BASTI's BASH COMMONS)
# A simple webserver framework written in Bash
#
# Web resources:
# http://www.redspin.com/blog/labs/2009/07/01/handling-html-in-the-shell/
#
# Licensed under the Apache License, Version 2.0 (the "License");
# ==============================================================================

# We need bash v4 or later, because we want to use arrays
if [ $( bash --version | head -n1 | awk -F"." '{print $1}' | \
awk '{print $4}' ) != 4 ]
then echo "Bash v4 is necessary"; exit 1; fi

declare -A qparams
export qparams
declare -A pparams
export pparams

###############################################################################
# BUSINESS LOGIC STUBS (override these to implement your own server logic)
###############################################################################

function process_GET () {
	extract_query_parameters $@
	extract_path_parameters $@
	write_200_OK_header
	write_webpage_prefix "bbc-webserver" "GET" "monospace"
	print_query_parameters
	print_path_parameters
	write_webpage_suffix
}

function process_POST () {
	write_200_OK_header
	write_webpage_prefix "bbc-webserver" "POST" "monospace"
	print_query_parameters
	print_path_parameters
	write_webpage_suffix
}

###############################################################################
# HELPER METHODS
###############################################################################

function wecho () {
	# Web echo
	echo "$@</br>"
}

function process_request () {
	if [ "$1" == "GET" ]
	then
		# no fancy favicons here - go away
		if [ "$2" == "/favicon.ico" ]; then echo -e "HTTP/1.1 404\r"; return; fi
		process_GET $@
	else
		process_POST $@
	fi
}

function extract_query_parameters () {
	request="$2"
	if [[ $request != *\?* ]]; then return; fi # no query param initiator
	request=$( echo $request | sed -r -e "s/^[^\?]+\?//g" )
	if [ -v $request ]; then return; fi # no query params
	for param in $( echo $request | tr "&" " " )
	do
		if [[ $param == *=* ]]
		then
			key=$( echo $param | tr "=" "\t" | cut -f1)
			value=$( echo $param | tr "=" "\t" | cut -f2)
			qparams[$key]=$value
		fi
	done
}

function extract_path_parameters () {
	request=$( echo $2 | sed -r -e "s/\?.*//g" -e "s/^[\/]+//g" -e "s/\/$//g" )
	if [ -v $request ]; then return; fi # no path params
	idx=0
	for param in $( echo $request | tr "/" " " )
	do 
		pparams[$idx]=$param
		idx=$(( $idx + 1 ))
	done
}

function print_query_parameters () {
	wecho "--- query parameters"
	for i in "${!qparams[@]}"
	do
	  wecho "  $i --> ${qparams[$i]}"
	done
}

function print_path_parameters () {
	wecho "--- path parameters"
	for i in "${!pparams[@]}"
	do
	  wecho "  $i --> ${pparams[$i]}"
	done
}

function write_200_OK_header () {
	echo -e "HTTP/1.1 200 OK\r"
	echo "Content-type: text/html"
	echo # IMPORTANT !
}

function write_error_page () {
	[ -v "$1" ] && CODE=500 || CODE=$1
	[ -v "$2" ] && MESSAGE="Internal server error" || MESSAGE="$2"
	echo -e "HTTP/1.1 ${CODE}\r"
	echo "Content-type: text/html"
	echo # IMPORTANT !
	write_webpage_prefix "Error ${CODE}" "Error ${CODE}" "monospace"
	wecho "$MESSAGE"
	write_webpage_suffix
}

function write_webpage_prefix () {
	# You can optionally provide:
	# $1 - Webpage title 
	# $2 - Headline label 
	# $3 - Global font family 
	echo "<!DOCTYPE html><html><head>"
	if [ ! -v "$1" ]; then echo "<title>${1}</title>"; fi
	if [ ! -v "$3" ]; then echo "<style>* { font-family: ${3}; }</style>"; fi
	echo "</head><body>"
	if [ ! -v "$2" ]; then echo "<h3>${2}</h3>"; fi 
}

function write_webpage_suffix () {
	echo "</body></html>"
}

function urlencode () {
	sed -e "s/!/%21/g" -e "s/\"/%22/g" -e "s/#/%23/g" \
	-e "s/\\$/%24/g" -e "s/&/%26/g" -e "s/'/%27/g" -e "s/(/%28/g" \
	-e "s/)/%29/g" -e "s/*/%2A/g" -e "s/+/%2B/g" -e "s/,/%2C/g" \
	-e "s/\//%2F/g" -e "s/:/%3A/g" -e "s/;/%3B/g" -e "s/=/%3D/g" \
	-e "s/?/%3F/g" -e "s/@/%40/g" -e "s/\[/%5B/g" -e "s/\]/%5D/g" \
	-e "s/ /%20/g" <<< "$1"
}


###############################################################################
# MAIN SERVER LOOP
###############################################################################

function bbc-start-server () {

	if [ $# -le 0 ]; then echo "No server port set."; return 1; fi
	SERVER_PORT=$1
	
	FIFO_PIPE_OUT=`mktemp`
	rm -f $FIFO_PIPE_OUT
	mkfifo $FIFO_PIPE_OUT
	echo "Created output pipe at $FIFO_PIPE_OUT"
	trap "rm -f $FIFO_PIPE_OUT" EXIT
	echo "Starting server on port $SERVER_PORT"

	while true
	do
		cat $FIFO_PIPE_OUT | nc -v -l $SERVER_PORT > >(
			request_uuid=$( uuidgen )
			while read line
			do
				echo $line
				if [[ $line == GET* ]] || [[ $line == POST* ]] # slow!
				then
					REQUEST=$line
				elif [ "$line" = "" ] # empty line / end of request
				then
					echo "Processing request with uuid '$request_uuid': $REQUEST"
					process_request $REQUEST > $FIFO_PIPE_OUT
					echo "Finished request processing for uuid '$request_uuid'"
				fi
			done
		)
	done
}
